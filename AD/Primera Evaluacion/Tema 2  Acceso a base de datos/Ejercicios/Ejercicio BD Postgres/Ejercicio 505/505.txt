import java.sql.*;
import java.util.Scanner;

public class ejercicio505 {

    private static Connection connection;
    static Scanner scanner;
    public static void main(String[] args) {
        String url = "jdbc:postgresql://localhost/hospital";
        String user = "postgres";
        String password = "abc123.";

        try {
            connection = DriverManager.getConnection(url, user, password);

            scanner = new Scanner(System.in);

            int opcion;
                    
            do {
                System.out.println("Menú de opciones:");
                System.out.println("1. Insertar Medico");
                System.out.println("2. Insertar Paciente");
                System.out.println("3. Insertar Examen Medico");
                System.out.println("4. Insertar Cita Medica");
                System.out.println("5. Modificar Medico");
                System.out.println("6. Modificar Paciente");
                System.out.println("7. Modificar Examen Medico");
                System.out.println("8. Modificar Cita Medica");
                System.out.println("9. Eliminar Medico");
                System.out.println("10. Eliminar Paciente");
                System.out.println("11. Eliminar Examen Medico");
                System.out.println("12. Eliminar Cita Medica");
                System.out.println("13. Listar información de un Paciente por ID");
                System.out.println("14. Listar información de todos los Pacientes");
                System.out.println("15. Listar información de un Medico por ID");
                System.out.println("16. Listar información de todos los Medicos");
                System.out.println("17. Listar información de un CitaMedica por ID de Paciente");
                System.out.println("18. Listar información de un CitaMedica por ID de Medico");
                System.out.println("19. Listar información de todos los Examenes Medicos de un Paciente");
                System.out.println("20. Listar información de un Paciente buscándolo por grupo sanguineo");
                System.out.println("21. Listar información de un Medico que atendia a un determinado Paciente");
                System.out.println("22. Salir");

                System.out.print("Selecciona una opción: ");
                opcion = scanner.nextInt();

                switch (opcion) {
                    case 1: // Insertar Medico
                        insertMedico();
                        break;
                    case 2: // Insertar Paciente
                        insertPaciente();
                        break;
                    case 3: // Insertar Examen Medico
                        insertExamenMedico();
                        break;
                    case 4: // Insertar Cita Medica
                        insertCitaMedica();
                        break;
                    case 5: // Modificar Medico
                        modificarMedico();
                        break;
                    case 6: // Modificar Paciente
                        modificarPaciente();
                        break;
                    case 7: // Modificar Examen Medico
                        modificarExamenMedico();
                        break;
                    case 8: // Modificar Cita Medica
                        modificarCitaMedica();
                        break;
                    case 9: // Eliminar Medico
                        eliminarMedico();
                        break;
                    case 10: // Eliminar Paciente
                        eliminarPaciente();
                        break;
                    case 11: // Eliminar Examen Medico
                        eliminarExamenMedico();
                        break;
                    case 12: //  Eliminar Cita Medica
                        eliminarCitaMedica();
                        break;
                    case 13: // Listar información de un Paciente por ID
                        listarInformacionPacientePorId();
                        break;
                    case 14: // Listar información de todos los Pacientes
                        listarInformacionTodosPacientes();
                        break;
                    case 15: //  Listar información de un Medico por ID
                        listarInformacionMedicoPorId();
                        break;
                    case 16: // Listar información de todos los Medicos
                        listarInformacionTodosMedicos();
                        break;
                    case 17: // Listar información de un CitaMedica por ID de Paciente
                        listarInformacionCitaMedicaPorIdPaciente();
                        break;
                    case 18: // Listar información de un CitaMedica por ID de Medico
                        listarInformacionCitaMedicaPorIdMedico();
                        break;
                    case 19: // Listar información de todos los Examenes Medicos de un Paciente
                        listarInformacionTodosExamenesMedicosPaciente();
                        break;
                    case 20: // Listar información de un Paciente buscándolo por grupo sanguineo
                        listarInformacionPacientePorGrupoSanguineo();
                        break;
                    case 21: // Listar información de un Medico que atendia a un determinado Paciente
                        listarInformacionMedicoQueAtiendioPaciente();
                        break;
                    default:
                        System.out.println("Opción no válida.");
                }
            }while(opcion != 22);
            scanner.close();

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static void listarInformacionMedicoQueAtiendioPaciente() {
        int pacienteId = pedirInt("Ingrese el ID del paciente para listar el médico que lo atendió: ");

        try {
            PreparedStatement statement = connection.prepareStatement(
                    "SELECT m.* FROM objetos.Medicos m JOIN objetos.CitasMedicas c ON m.medico_id = c.medico_id WHERE c.paciente_id = ?"
            );

            statement.setInt(1, pacienteId);

            ResultSet resultSet = statement.executeQuery();

            while (resultSet.next()) {
                System.out.println("\nID: " + resultSet.getInt("medico_id"));
                System.out.println("Nombre: " + resultSet.getString("datos_personales.nombre"));
                System.out.println("Edad: " + resultSet.getInt("datos_personales.edad"));
                System.out.println("Código Médico: " + resultSet.getString("medico_info.codigo_medico"));
                System.out.println("Especialidad: " + resultSet.getString("medico_info.especialidad"));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static void listarInformacionPacientePorGrupoSanguineo() {
        String grupoSanguineo = pedirString("Ingrese el grupo sanguíneo para listar los pacientes: ");

        try {
            PreparedStatement statement = connection.prepareStatement(
                    "SELECT * FROM objetos.Pacientes WHERE paciente_info.grupo_sanguineo = ?"
            );

            statement.setString(1, grupoSanguineo);

            ResultSet resultSet = statement.executeQuery();

            while (resultSet.next()) {
                System.out.println("\nID: " + resultSet.getInt("paciente_id"));
                System.out.println("Nombre: " + resultSet.getString("datos_personales.nombre"));
                System.out.println("Edad: " + resultSet.getInt("datos_personales.edad"));
                System.out.println("Número de Historia: " + resultSet.getString("paciente_info.numero_historia"));
                System.out.println("Grupo Sanguíneo: " + resultSet.getString("paciente_info.grupo_sanguineo"));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static void listarInformacionTodosExamenesMedicosPaciente() {
        int pacienteId = pedirInt("Ingrese el ID del paciente para listar los exámenes médicos: ");

        try {
            PreparedStatement statement = connection.prepareStatement(
                    "SELECT * FROM objetos.ExamenesMedicos WHERE paciente_id = ?"
            );

            statement.setInt(1, pacienteId);

            ResultSet resultSet = statement.executeQuery();

            while (resultSet.next()) {
                System.out.println("\nID: " + resultSet.getInt("examen_id"));
                System.out.println("Nombre del Examen: " + resultSet.getString("examen_info.nombre_examen"));
                System.out.println("Fecha de Realización: " + resultSet.getString("examen_info.fecha_realizacion"));
                System.out.println("Resultado: " + resultSet.getString("examen_info.resultado"));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static void listarInformacionCitaMedicaPorIdMedico() {
        int medicoId = pedirInt("Ingrese el ID del médico para listar las citas médicas: ");

        try {
            PreparedStatement statement = connection.prepareStatement(
                    "SELECT * FROM objetos.CitasMedicas WHERE medico_id = ?"
            );

            statement.setInt(1, medicoId);

            ResultSet resultSet = statement.executeQuery();

            while (resultSet.next()) {
                System.out.println("\nID: " + resultSet.getInt("cita_id"));
                System.out.println("Fecha y Hora: " + resultSet.getString("fecha_hora"));
                System.out.println("Paciente ID: " + resultSet.getInt("paciente_id"));
                System.out.println("Médico ID: " + resultSet.getInt("medico_id"));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static void listarInformacionCitaMedicaPorIdPaciente() {
        int pacienteId = pedirInt("Ingrese el ID del paciente para listar las citas médicas: ");

        try {
            PreparedStatement statement = connection.prepareStatement(
                    "SELECT * FROM objetos.CitasMedicas WHERE paciente_id = ?"
            );

            statement.setInt(1, pacienteId);

            ResultSet resultSet = statement.executeQuery();

            while (resultSet.next()) {
                System.out.println("\nID: " + resultSet.getInt("cita_id"));
                System.out.println("Fecha y Hora: " + resultSet.getString("fecha_hora"));
                System.out.println("Paciente ID: " + resultSet.getInt("paciente_id"));
                System.out.println("Médico ID: " + resultSet.getInt("medico_id"));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static void listarInformacionTodosMedicos() {
        try {
            PreparedStatement statement = connection.prepareStatement(
                    "SELECT * FROM objetos.Medicos"
            );

            ResultSet resultSet = statement.executeQuery();

            while (resultSet.next()) {
                System.out.println("\nID: " + resultSet.getInt("medico_id"));
                System.out.println("Nombre: " + resultSet.getString("datos_personales.nombre"));
                System.out.println("Edad: " + resultSet.getInt("datos_personales.edad"));
                System.out.println("Código Médico: " + resultSet.getString("medico_info.codigo_medico"));
                System.out.println("Especialidad: " + resultSet.getString("medico_info.especialidad"));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static void listarInformacionMedicoPorId() {
        int medicoId = pedirInt("Ingrese el ID del médico para listar la información: ");

        try {
            PreparedStatement statement = connection.prepareStatement(
                    "SELECT * FROM objetos.Medicos WHERE medico_id = ?"
            );

            statement.setInt(1, medicoId);

            ResultSet resultSet = statement.executeQuery();

            if (resultSet.next()) {
                System.out.println("\nID: " + resultSet.getInt("medico_id"));
                System.out.println("Nombre: " + resultSet.getString("datos_personales.nombre"));
                System.out.println("Edad: " + resultSet.getInt("datos_personales.edad"));
                System.out.println("Código Médico: " + resultSet.getString("medico_info.codigo_medico"));
                System.out.println("Especialidad: " + resultSet.getString("medico_info.especialidad"));
            } else {
                System.out.println("No se encontró un médico con el ID especificado.");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static void listarInformacionTodosPacientes() {
        try {
            PreparedStatement statement = connection.prepareStatement(
                    "SELECT * FROM objetos.Pacientes"
            );

            ResultSet resultSet = statement.executeQuery();

            while (resultSet.next()) {
                System.out.println("\nID: " + resultSet.getInt("paciente_id"));
                System.out.println("Nombre: " + resultSet.getString("datos_personales.nombre"));
                System.out.println("Edad: " + resultSet.getInt("datos_personales.edad"));
                System.out.println("Número de Historia: " + resultSet.getString("paciente_info.numero_historia"));
                System.out.println("Grupo Sanguíneo: " + resultSet.getString("paciente_info.grupo_sanguineo"));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static void listarInformacionPacientePorId() {
        int pacienteId = pedirInt("Ingrese el ID del paciente para listar la información: ");

        try {
            PreparedStatement statement = connection.prepareStatement(
                    "SELECT * FROM objetos.Pacientes WHERE paciente_id = ?"
            );

            statement.setInt(1, pacienteId);

            ResultSet resultSet = statement.executeQuery();

            if (resultSet.next()) {
                System.out.println("\nID: " + resultSet.getInt("paciente_id"));
                System.out.println("Nombre: " + resultSet.getString("datos_personales.nombre"));
                System.out.println("Edad: " + resultSet.getInt("datos_personales.edad"));
                System.out.println("Número de Historia: " + resultSet.getString("paciente_info.numero_historia"));
                System.out.println("Grupo Sanguíneo: " + resultSet.getString("paciente_info.grupo_sanguineo"));
            } else {
                System.out.println("No se encontró un paciente con el ID especificado.");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static void eliminarCitaMedica() {
        int citaId = pedirInt("Ingrese el ID de la cita médica a eliminar: ");

        try {
            PreparedStatement statement = connection.prepareStatement(
                    "DELETE FROM objetos.CitasMedicas WHERE cita_id = ?"
            );

            statement.setInt(1, citaId);

            int rowsAffected = statement.executeUpdate();

            if (rowsAffected > 0) {
                System.out.println("Cita médica eliminada correctamente.");
            } else {
                System.out.println("No se encontró una cita médica con el ID especificado.");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static void eliminarExamenMedico() {
        int examenId = pedirInt("Ingrese el ID del examen médico a eliminar: ");

        try {
            PreparedStatement statement = connection.prepareStatement(
                    "DELETE FROM objetos.ExamenesMedicos WHERE examen_id = ?"
            );

            statement.setInt(1, examenId);

            int rowsAffected = statement.executeUpdate();

            if (rowsAffected > 0) {
                System.out.println("Examen médico eliminado correctamente.");
            } else {
                System.out.println("No se encontró un examen médico con el ID especificado.");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static void eliminarPaciente() {
        int pacienteId = pedirInt("Ingrese el ID del paciente a eliminar: ");

        try {
            PreparedStatement statement = connection.prepareStatement(
                    "DELETE FROM objetos.Pacientes WHERE paciente_id = ?"
            );

            statement.setInt(1, pacienteId);

            int rowsAffected = statement.executeUpdate();

            if (rowsAffected > 0) {
                System.out.println("Paciente eliminado correctamente.");
            } else {
                System.out.println("No se encontró un paciente con el ID especificado.");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static void eliminarMedico() {
        int medicoId = pedirInt("Ingrese el ID del médico a eliminar: ");

        try {
            PreparedStatement statement = connection.prepareStatement(
                    "DELETE FROM objetos.Medicos WHERE medico_id = ?"
            );

            statement.setInt(1, medicoId);

            int rowsAffected = statement.executeUpdate();

            if (rowsAffected > 0) {
                System.out.println("Medico eliminado correctamente.");
            } else {
                System.out.println("No se encontró un médico con el ID especificado.");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static void modificarCitaMedica() {
        int citaId = pedirInt("Ingrese el ID de la cita médica a modificar: ");
        String nuevaFechaHora = pedirString("Ingrese la nueva fecha y hora de la cita médica (YYYY-MM-DD HH:mm:ss): ");
        int nuevoPacienteId = pedirInt("Ingrese el nuevo ID del paciente para la cita médica: ");
        int nuevoMedicoId = pedirInt("Ingrese el nuevo ID del médico para la cita médica: ");

        try {
            PreparedStatement statement = connection.prepareStatement(
                    "UPDATE objetos.CitasMedicas SET fecha_hora = ?, paciente_id = ?, medico_id = ? WHERE cita_id = ?"
            );

            statement.setString(1, nuevaFechaHora);
            statement.setInt(2, nuevoPacienteId);
            statement.setInt(3, nuevoMedicoId);
            statement.setInt(4, citaId);

            int rowsAffected = statement.executeUpdate();

            if (rowsAffected > 0) {
                System.out.println("Cita médica modificada correctamente.");
            } else {
                System.out.println("No se encontró una cita médica con el ID especificado.");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static void modificarExamenMedico() {
        int examenId = pedirInt("Ingrese el ID del examen médico a modificar: ");
        String nuevoNombreExamen = pedirString("Ingrese el nuevo nombre del examen médico: ");
        String nuevaFechaRealizacion = pedirString("Ingrese la nueva fecha de realización del examen médico (YYYY-MM-DD): ");
        String nuevoResultado = pedirString("Ingrese el nuevo resultado del examen médico: ");

        try {
            PreparedStatement statement = connection.prepareStatement(
                    "UPDATE objetos.ExamenesMedicos SET examen_info = ROW(?, ?, ?) WHERE examen_id = ?"
            );

            statement.setString(1, nuevoNombreExamen);
            statement.setString(2, nuevaFechaRealizacion);
            statement.setString(3, nuevoResultado);
            statement.setInt(4, examenId);

            int rowsAffected = statement.executeUpdate();

            if (rowsAffected > 0) {
                System.out.println("Examen médico modificado correctamente.");
            } else {
                System.out.println("No se encontró un examen médico con el ID especificado.");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static void modificarPaciente() {
        int pacienteId = pedirInt("Ingrese el ID del paciente a modificar: ");
        String nuevoNombre = pedirString("Ingrese el nuevo nombre del paciente: ");
        int nuevaEdad = pedirInt("Ingrese la nueva edad del paciente: ");
        String nuevoNumeroHistoria = pedirString("Ingrese el nuevo número de historia del paciente: ");
        String nuevoGrupoSanguineo = pedirString("Ingrese el nuevo grupo sanguíneo del paciente: ");

        try {
            PreparedStatement statement = connection.prepareStatement(
                    "UPDATE objetos.Pacientes SET datos_personales = ROW(?, ?), paciente_info = ROW(?, ?) WHERE paciente_id = ?"
            );

            statement.setString(1, nuevoNombre);
            statement.setInt(2, nuevaEdad);
            statement.setString(3, nuevoNumeroHistoria);
            statement.setString(4, nuevoGrupoSanguineo);
            statement.setInt(5, pacienteId);

            int rowsAffected = statement.executeUpdate();

            if (rowsAffected > 0) {
                System.out.println("Paciente modificado correctamente.");
            } else {
                System.out.println("No se encontró un paciente con el ID especificado.");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static void modificarMedico() {
        int medicoId = pedirInt("Ingrese el ID del médico a modificar: ");
        String nuevoNombre = pedirString("Ingrese el nuevo nombre del médico: ");
        int nuevaEdad = pedirInt("Ingrese la nueva edad del médico: ");
        String nuevoCodigoMedico = pedirString("Ingrese el nuevo código del médico: ");
        String nuevaEspecialidad = pedirString("Ingrese la nueva especialidad del médico: ");

        try {
            PreparedStatement statement = connection.prepareStatement(
                    "UPDATE objetos.Medicos SET datos_personales = ROW(?, ?), medico_info = ROW(?, ?) WHERE medico_id = ?"
            );

            statement.setString(1, nuevoNombre);
            statement.setInt(2, nuevaEdad);
            statement.setString(3, nuevoCodigoMedico);
            statement.setString(4, nuevaEspecialidad);
            statement.setInt(5, medicoId);

            int rowsAffected = statement.executeUpdate();

            if (rowsAffected > 0) {
                System.out.println("Medico modificado correctamente.");
            } else {
                System.out.println("No se encontró un médico con el ID especificado.");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static void insertCitaMedica() {
        String fechaHora = pedirString("Ingrese la fecha y hora de la cita médica (YYYY-MM-DD HH:mm:ss): ");
        int pacienteId = pedirInt("Ingrese el ID del paciente para la cita médica: ");
        int medicoId = pedirInt("Ingrese el ID del médico para la cita médica: ");

        try {
            PreparedStatement statement = connection.prepareStatement(
                    "INSERT INTO objetos.CitasMedicas (fecha_hora, paciente_id, medico_id) VALUES (?, ?, ?)"
            );

            statement.setString(1, fechaHora);
            statement.setInt(2, pacienteId);
            statement.setInt(3, medicoId);

            statement.executeUpdate();
            System.out.println("Cita médica insertada correctamente.");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static void insertExamenMedico() {
        int pacienteId = pedirInt("Ingrese el ID del paciente para el examen médico: ");
        String nombreExamen = pedirString("Ingrese el nombre del examen médico: ");
        String fechaRealizacion = pedirString("Ingrese la fecha de realización del examen médico (YYYY-MM-DD): ");
        String resultado = pedirString("Ingrese el resultado del examen médico: ");

        try {
            PreparedStatement statement = connection.prepareStatement(
                    "INSERT INTO objetos.ExamenesMedicos (paciente_id, examen_info) VALUES (?, ROW(?, ?, ?))"
            );

            statement.setInt(1, pacienteId);
            statement.setString(2, nombreExamen);
            statement.setString(3, fechaRealizacion);
            statement.setString(4, resultado);

            statement.executeUpdate();
            System.out.println("Examen médico insertado correctamente.");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static void insertPaciente() {
        String nombre = pedirString("Ingrese el nombre del paciente: ");
        int edad = pedirInt("Ingrese la edad del paciente: ");
        String numeroHistoria = pedirString("Ingrese el número de historia del paciente: ");
        String grupoSanguineo = pedirString("Ingrese el grupo sanguíneo del paciente: ");

        try {
            PreparedStatement statement = connection.prepareStatement(
                    "INSERT INTO objetos.Pacientes (datos_personales, paciente_info) VALUES (ROW(?, ?), ROW(?, ?))"
            );

            statement.setString(1, nombre);
            statement.setInt(2, edad);
            statement.setString(3, numeroHistoria);
            statement.setString(4, grupoSanguineo);

            statement.executeUpdate();
            System.out.println("Paciente insertado correctamente.");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static void insertMedico() {
        String nombre = pedirString("Ingrese el nombre del médico: ");
        int edad = pedirInt("Ingrese la edad del médico: ");
        String codigoMedico = pedirString("Ingrese el código del médico: ");
        String especialidad = pedirString("Ingrese la especialidad del médico: ");

        try {
            PreparedStatement statement = connection.prepareStatement(
                    "INSERT INTO objetos.Medicos (datos_personales, medico_info) VALUES (ROW(?, ?), ROW(?, ?))"
            );

            statement.setString(1, nombre);
            statement.setInt(2, edad);
            statement.setString(3, codigoMedico);
            statement.setString(4, especialidad);

            statement.executeUpdate();
            System.out.println("Medico insertado correctamente.");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static int pedirInt(String mensaje) {
        while(true) {
            System.out.print(mensaje);
            try {
                return scanner.nextInt();
            }catch (Exception e) {
            }
        }
    }

    public static String pedirString(String mensaje) {
        while(true) {
            System.out.print(mensaje);
            try {
                return scanner.next();
            }catch (Exception e) {
            }
        }
    }
}
